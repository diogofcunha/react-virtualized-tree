// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FilteringContainer filtering should filter for deepsearch 1`] = `
Array [
  Object {
    "children": Array [
      Object {
        "children": Array [],
        "id": 2,
        "name": "Leaf 2",
        "state": Object {
          "deletable": true,
          "expanded": true,
        },
      },
    ],
    "id": 0,
    "name": "Leaf 1",
    "state": Object {
      "expanded": true,
    },
  },
]
`;

exports[`FilteringContainer filtering should filter when results match more then 1 node 1`] = `
Array [
  Object {
    "children": Array [],
    "id": 0,
    "name": "Leaf 1",
    "state": Object {
      "expanded": true,
    },
  },
  Object {
    "children": Array [
      Object {
        "children": Array [],
        "id": 9,
        "name": "Leaf 10",
      },
    ],
    "id": 1,
    "name": "Leaf 6",
    "state": Object {
      "deletable": true,
      "expanded": false,
    },
  },
]
`;

exports[`FilteringContainer filtering should ignore boundarie spaces when filtering 1`] = `
Array [
  Object {
    "children": Array [],
    "id": 0,
    "name": "Leaf 1",
    "state": Object {
      "expanded": true,
    },
  },
  Object {
    "children": Array [
      Object {
        "children": Array [],
        "id": 9,
        "name": "Leaf 10",
      },
    ],
    "id": 1,
    "name": "Leaf 6",
    "state": Object {
      "deletable": true,
      "expanded": false,
    },
  },
]
`;

exports[`FilteringContainer filtering should ignore casing when filtering 1`] = `
Array [
  Object {
    "children": Array [
      Object {
        "children": Array [
          Object {
            "children": Array [
              Object {
                "children": Array [],
                "id": "c-3",
                "name": "Leaf 3 Child",
                "state": Object {},
              },
            ],
            "id": 3,
            "name": "Leaf 3",
            "state": Object {
              "deletable": true,
              "expanded": false,
              "favorite": true,
            },
          },
        ],
        "id": 2,
        "name": "Leaf 2",
        "state": Object {
          "deletable": true,
          "expanded": true,
        },
      },
    ],
    "id": 0,
    "name": "Leaf 1",
    "state": Object {
      "expanded": true,
    },
  },
]
`;

exports[`FilteringContainer groups when groups exist should filter results based on the selected group 1`] = `
Array [
  Object {
    "children": Array [
      Object {
        "children": Array [],
        "id": 2,
        "name": "Leaf 2",
        "state": Object {
          "deletable": true,
          "expanded": true,
        },
      },
    ],
    "id": 0,
    "name": "Leaf 1",
    "state": Object {
      "expanded": true,
    },
  },
]
`;

exports[`FilteringContainer groups when groups exist should render a injected groupRenderer 1`] = `
<div
  data-testid="group-renderer"
>
  Group renderer! 
  {"groups":{"EXPANDED":{"name":"Expanded"},"FAVORITES":{"name":"Favorites"}},"selectedGroup":"EXPANDED"}
</div>
`;

exports[`FilteringContainer groups when groups exist should render the DefaultGroupRenderer when one is not injected as a prop 1`] = `
<select
  class="tree-group"
>
  <option
    value="EXPANDED"
  >
    Expanded
  </option>
  <option
    value="FAVORITES"
  >
    Favorites
  </option>
</select>
`;

exports[`FilteringContainer groups when groups exist should work when matched with filtering 1`] = `
Array [
  Object {
    "children": Array [],
    "id": 0,
    "name": "Leaf 1",
    "state": Object {
      "expanded": true,
    },
  },
]
`;
